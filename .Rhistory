winData <- read.csv("data-raw/winData.csv")
usethis::use_data(winData, overwrite = TRUE)
devtools::document()
usethis::use_gpl_license()
devtools::install()
devtools::install()
devtools::document()
devtools::document()
devtools::install()
winData
SUU_performance()
win_loss_scatter()
devtools::install()
SUU_performance()
SUU_performance()
devtools::install()
devtools::install()
devtools::install()
SUU_performance()
devtools::install()
SUU_performance()
devtools::document()
devtools::install()
SUU_performance()
devtools::document()
devtools::install()
SUU_performance()
devtools::document()
devtools::install()
win_loss_scatter()
SUU_performance()
devtools::document()
devtools::install()
SUU_performance()
devtools::document()
devtools::install()
SUU_performance()
devtools::document()
devtools::install()
SUU_performance()
devtools::document()
devtools::install()
SUU_performance()
team_games(games2023, "Southern Utah")
team_summary(games2023, "Southern Utah")
devtools::document()
devtools::install()
.Last.error
devtools::install()
devtools::document()
devtools::install()
SUU_performance()
team_games(games2023, "Southern Utah")
team_summary(games2023, "Southern Utah")
win_loss_scatter()
devtools::build_manual()
devtools::install_github("Macafry/basketPlots")
winData
library("basketPlots")
winData
SUU_performance()
win_loss_scatter()
winData
games2023
devtools::install_github("Macafry/basketPlots")
library("shiny")
library("basketPlots")
library("tidyverse")
library("knitr")
library("kableExtra")
ui <- fluidPage(
# Put a titlePanel here
sidebarLayout(
sidebarPanel(
textInput("team", "Team:")
),
mainPanel(
htmlOutput("table"),
plotOutput("plot")
)
)
)
server <- function(input, output, session) {
team <- reactive({
input$team
})
validTeam <- reactive({
team() %in% winData[["Team"]]
})
output$table <- renderText({
if ( validTeam() ) {(
games2023
%>% team_summary(team())
%>% kbl(caption = paste(team(), "win data"))
%>% kable_styling(bootstrap_options = c("striped", "hover"))
)} else {
paste0("<p>That's not a valid team name!!!</p>",
"<p>Choose one among the following:</p>",
"<p>(Autofilter enabled: Clear name for full list)</p>",
winData
%>% filter(substring(Team,1, nchar(team())) == team())
%>% arrange(Team)
%>% ( function (df) {ifelse(nrow(df)==0, winData, df) }) # show all if there are no matches
%>% kable(format = "html", col.names = NULL))
}
})
output$plot <- renderPlot({
if ( validTeam() ){
team_performance( team() )
} else {
ggplot()
}
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("2023 Game Data App"),
sidebarLayout(
sidebarPanel(
textInput("team", "Team:")
),
mainPanel(
htmlOutput("table"),
plotOutput("plot")
)
)
)
server <- function(input, output, session) {
team <- reactive({
input$team
})
validTeam <- reactive({
team() %in% winData[["Team"]]
})
output$table <- renderText({
if ( validTeam() ) {(
games2023
%>% team_summary(team())
%>% kbl(caption = paste(team(), "win data"))
%>% kable_styling(bootstrap_options = c("striped", "hover"))
)} else {
paste0("<p>That's not a valid team name!!!</p>",
"<p>Choose one among the following:</p>",
"<p>(Autofilter enabled: Clear name for full list)</p>",
winData
%>% filter(substring(Team,1, nchar(team())) == team())
%>% arrange(Team)
%>% ( function (df) {ifelse(nrow(df)==0, winData, df) }) # show all if there are no matches
%>% kable(format = "html", col.names = NULL))
}
})
output$plot <- renderPlot({
if ( validTeam() ){
team_performance( team() )
}
})
}
shinyApp(ui = ui, server = server)
?textInput
ui <- fluidPage(
titlePanel("2023 Game Data App"),
sidebarLayout(
sidebarPanel(
textInput(inputId = "team", label = "Team:"),
actionButton(inputId = "clear", label = "Reset Team List")
),
mainPanel(
htmlOutput("table"),
plotOutput("plot")
)
)
)
server <- function(input, output, session) {
team <- reactive({
input$team
})
validTeam <- reactive({
team() %in% winData[["Team"]]
})
output$table <- renderText({
if ( validTeam() ) {(
games2023
%>% team_summary(team())
%>% kbl(caption = paste(team(), "win data"))
%>% kable_styling(bootstrap_options = c("striped", "hover"))
)} else {
paste0("<p>That's not a valid team name!!!</p>",
"<p>Choose one among the following:</p>",
"<p>(Autofilter enabled: Clear name for full list)</p>",
winData
%>% filter(substring(Team,1, nchar(team())) == team())
%>% arrange(Team)
%>% ( function (df) {ifelse(nrow(df)==0, winData, df) }) # show all if there are no matches
%>% kable(format = "html", col.names = NULL))
}
})
output$plot <- renderPlot({
if ( validTeam() ){
team_performance( team() )
}
})
observeEvent(
eventExpr = input[["clear"]],
handlerExpr = {
input$team <- ""
}
)
}
shinyApp(ui = ui, server = server)
basketShiny <- function () {
ui <- fluidPage(
titlePanel("2023 Game Data App"),
sidebarLayout(
sidebarPanel(
textInput(inputId = "team", label = "Team:"),
actionButton(inputId = "clear", label = "Reset Team List")
),
mainPanel(
htmlOutput("table"),
plotOutput("plot")
)
)
)
server <- function(input, output, session) {
team <- reactive({
input$team
})
validTeam <- reactive({
team() %in% winData[["Team"]]
})
output$table <- renderText({
if ( validTeam() ) {(
games2023
%>% team_summary(team())
%>% kbl(caption = paste(team(), "win data"))
%>% kable_styling(bootstrap_options = c("striped", "hover"))
)} else {
paste0("<p>That's not a valid team name!!!</p>",
"<p>Choose one among the following:</p>",
"<p>(Autofilter enabled: Clear name for full list)</p>",
winData
%>% filter(substring(Team,1, nchar(team())) == team())
%>% arrange(Team)
%>% ( function (df) {ifelse(nrow(df)==0, winData, df) }) # show all if there are no matches
%>% kable(format = "html", col.names = NULL))
}
})
output$plot <- renderPlot({
if ( validTeam() ){
team_performance( team() )
}
})
observeEvent(input$clear,
handlerExpr = {
updateTextInput(session, "team", value = "")
}
)
}
shinyApp(ui = ui, server = server)
}
basketShiny <- function () {
ui <- fluidPage(
titlePanel("2023 Game Data App"),
sidebarLayout(
sidebarPanel(
textInput(inputId = "team", label = "Team:"),
actionButton(inputId = "clear", label = "Reset Team List")
),
mainPanel(
htmlOutput("table"),
plotOutput("plot")
)
)
)
server <- function(input, output, session) {
team <- reactive({
input$team
})
validTeam <- reactive({
team() %in% winData[["Team"]]
})
output$table <- renderText({
if ( validTeam() ) {(
games2023
%>% team_summary(team())
%>% kbl(caption = paste(team(), "win data"))
%>% kable_styling(bootstrap_options = c("striped", "hover"))
)} else {
paste0("<p>That's not a valid team name!!!</p>",
"<p>Choose one among the following:</p>",
"<p>(Autofilter enabled: Clear name for full list)</p>",
winData
%>% filter(substring(Team,1, nchar(team())) == team())
%>% arrange(Team)
%>% ( function (df) {ifelse(nrow(df)==0, winData, df) }) # show all if there are no matches
%>% kable(format = "html", col.names = NULL))
}
})
output$plot <- renderPlot({
if ( validTeam() ){
team_performance( team() )
}
})
observeEvent(input$clear,
handlerExpr = {
updateTextInput(session, "team", value = "")
}
)
}
shinyApp(ui = ui, server = server)
}
ui <- fluidPage(
titlePanel("2023 Game Data App"),
sidebarLayout(
sidebarPanel(
textInput(inputId = "team", label = "Team:"),
actionButton(inputId = "clear", label = "Reset Team List")
),
mainPanel(
htmlOutput("table"),
plotOutput("plot")
)
)
)
server <- function(input, output, session) {
team <- reactive({
input$team
})
validTeam <- reactive({
team() %in% winData[["Team"]]
})
output$table <- renderText({
if ( validTeam() ) {(
games2023
%>% team_summary(team())
%>% kbl(caption = paste(team(), "win data"))
%>% kable_styling(bootstrap_options = c("striped", "hover"))
)} else {
paste0("<p>That's not a valid team name!!!</p>",
"<p>Choose one among the following:</p>",
"<p>(Autofilter enabled: Clear name for full list)</p>",
winData
%>% filter(substring(Team,1, nchar(team())) == team())
%>% arrange(Team)
%>% ( function (df) {ifelse(nrow(df)==0, winData, df) }) # show all if there are no matches
%>% kable(format = "html", col.names = NULL))
}
})
output$plot <- renderPlot({
if ( validTeam() ){
team_performance( team() )
}
})
observeEvent(input$clear,
handlerExpr = {
updateTextInput(session, "team", value = "")
}
)
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("2023 Game Data App"),
sidebarLayout(
sidebarPanel(
textInput(inputId = "team", label = "Team:"),
actionButton(inputId = "clear", label = "Reset Team List")
),
mainPanel(
htmlOutput("table"),
plotOutput("plot")
)
)
)
server <- function(input, output, session) {
team <- reactive({
input$team
})
validTeam <- reactive({
team() %in% winData[["Team"]]
})
output$table <- renderText({
if ( validTeam() ) {(
games2023
%>% team_summary(team())
%>% kbl(caption = paste(team(), "win data"))
%>% kable_styling(bootstrap_options = c("striped", "hover"))
)} else {
paste0("<p>Unfortunately ", team(), " is not a valid team name.</p>",
"<p>(Autofilter enabled - Clear name for full list)</p>",
"<p>Choose one among the following:</p>",
winData
%>% filter(substring(Team,1, nchar(team())) == team())
%>% arrange(Team)
%>% ( function (df) {ifelse(nrow(df)==0, winData, df) }) # show all if there are no matches
%>% kable(format = "html", col.names = NULL))
}
})
output$plot <- renderPlot({
if ( validTeam() ){
team_performance( team() )
}
})
observeEvent(input$clear,
handlerExpr = {
updateTextInput(session, "team", value = "")
}
)
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("2023 Game Data App"),
sidebarLayout(
sidebarPanel(
textInput(inputId = "team", label = "Team:"),
actionButton(inputId = "clear", label = "Reset Team List")
),
mainPanel(
htmlOutput("table"),
plotOutput("plot")
)
)
)
server <- function(input, output, session) {
team <- reactive({
input$team
})
validTeam <- reactive({
team() %in% winData[["Team"]]
})
output$table <- renderText({
if ( validTeam() ) {(
games2023
%>% team_summary(team())
%>% kbl(caption = paste(team(), "win data"))
%>% kable_styling(bootstrap_options = c("striped", "hover"))
)} else {
paste0("<p>Unfortunately \"", team(), "\" is not a valid team name.</p>",
"<p>(Autofilter enabled - Clear name for full list)</p>",
"<p>Choose one among the following:</p>",
winData
%>% filter(substring(Team,1, nchar(team())) == team())
%>% arrange(Team)
%>% ( function (df) {ifelse(nrow(df)==0, winData, df) }) # show all if there are no matches
%>% kable(format = "html", col.names = NULL))
}
})
output$plot <- renderPlot({
if ( validTeam() ){
team_performance( team() )
}
})
observeEvent(input$clear,
handlerExpr = {
updateTextInput(session, "team", value = "")
}
)
}
shinyApp(ui = ui, server = server)
basketShiny = function() {
ui <- fluidPage(
titlePanel("2023 Game Data App"),
sidebarLayout(
sidebarPanel(
textInput(inputId = "team", label = "Team:"),
actionButton(inputId = "clear", label = "Reset Team List")
),
mainPanel(
htmlOutput("table"),
plotOutput("plot")
)
)
)
server <- function(input, output, session) {
team <- reactive({
input$team
})
validTeam <- reactive({
team() %in% winData[["Team"]]
})
output$table <- renderText({
if ( validTeam() ) {(
games2023
%>% team_summary(team())
%>% kbl(caption = paste(team(), "win data"))
%>% kable_styling(bootstrap_options = c("striped", "hover"))
)} else {
paste0("<p>Unfortunately \"", team(), "\" is not a valid team name.</p>",
"<p>(Autofilter enabled - Clear name for full list)</p>",
"<p>Choose one among the following:</p>",
winData
%>% filter(substring(Team,1, nchar(team())) == team())
%>% arrange(Team)
%>% ( function (df) {ifelse(nrow(df)==0, winData, df) }) # show all if there are no matches
%>% kable(format = "html", col.names = NULL))
}
})
output$plot <- renderPlot({
if ( validTeam() ){
team_performance( team() )
}
})
observeEvent(input$clear,
handlerExpr = {
updateTextInput(session, "team", value = "")
}
)
}
shinyApp(ui = ui, server = server)
}
basketShiny()
?kbl
devtools::build_manual()
